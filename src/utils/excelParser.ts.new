import { Sheet, ProcessedExcelData, HeaderMapping } from "../types";
import * as XLSX from 'xlsx';
import { error as logError } from './logger';

/**
 * Parses an Excel file using the xlsx library
 */
export const parseExcelFile = async (file: File): Promise<ProcessedExcelData> => {
  return new Promise((resolve, reject) => {
    try {
      // Validate file
      if (file.size <= 0) {
        logError('Excel parsing error', 'File is empty');
        reject(new Error('The Excel file is empty'));
        return;
      }

      // Check for valid Excel file type
      const fileExtension = file.name.split('.').pop()?.toLowerCase();
      if (fileExtension !== 'xlsx' && fileExtension !== 'xls') {
        logError('Excel parsing error', 'Invalid file format: ' + fileExtension);
        reject(new Error('Invalid file format. Please upload an Excel file (.xlsx or .xls)'));
        return;
      }

      // Use FileReader to read the file
      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          // Parse workbook
          const data = new Uint8Array(e.target?.result as ArrayBuffer);
          const workbook = XLSX.read(data, { type: 'array' });

          // Check if workbook has sheets
          if (!workbook.SheetNames || workbook.SheetNames.length === 0) {
            logError('Excel parsing error', 'No sheets found in file');
            reject(new Error('The file contains no sheets'));
            return;
          }

          // Process each sheet
          const sheets: Sheet[] = workbook.SheetNames.map(sheetName => {
            const worksheet = workbook.Sheets[sheetName];
            // Convert sheet to JSON with header row
            const sheetData = XLSX.utils.sheet_to_json(worksheet, { defval: '' });
            return {
              name: sheetName,
              data: sheetData
            };
          });

          // Filter out empty sheets
          const nonEmptySheets = sheets.filter(sheet => sheet.data && sheet.data.length > 0);

          if (nonEmptySheets.length === 0) {
            logError('Excel parsing error', 'All sheets are empty');
            reject(new Error('All sheets in the file are empty'));
            return;
          }

          // Set current sheet to the first non-empty sheet
          const currentSheet = nonEmptySheets[0];
          const headers = Object.keys(currentSheet.data[0]);

          // Auto-detect header mapping
          const mapping: HeaderMapping = detectHeaders(headers);

          resolve({
            sheets: nonEmptySheets,
            currentSheet,
            headers,
            mapping
          });
        } catch (error) {
          logError('Excel parsing error', error);
          reject(new Error('Failed to parse the Excel file. The file might be corrupted or in an unsupported format.'));
        }
      };

      reader.onerror = () => {
        logError('Excel parsing error', 'FileReader error');
        reject(new Error('Error reading the file. Please try again.'));
      };

      // Read the file as an array buffer
      reader.readAsArrayBuffer(file);
    } catch (error) {
      logError('Excel parsing error', error);
      reject(new Error('An unexpected error occurred while processing the Excel file.'));
    }
  });
};

/**
 * Detects possible column headers for student ID, name, and grade
 */
export const detectHeaders = (headers: string[]): HeaderMapping => {
  const mapping: HeaderMapping = { id: "", name: "", grade: "" };

  for (const header of headers) {
    const headerLower = header.toLowerCase();

    if (/id|رقم|код|编号|número/i.test(headerLower) && !mapping.id) {
      mapping.id = header;
    } else if (/name|اسم|student|طالب|имя|姓名|nombre/i.test(headerLower) && !mapping.name) {
      mapping.name = header;
    } else if (/grade|final|mark|درجة|total|مجموع|نتيجة|оценка|成绩|calificación/i.test(headerLower) && !mapping.grade) {
      mapping.grade = header;
    }
  }

  return mapping;
};

/**
 * Gets a list of student names for auto-suggestion
 */
export const getStudentNames = (data: any[], nameField: string): string[] => {
  return data.map(item => item[nameField]).filter(Boolean);
};

/**
 * Validates that columns contain the expected data types
 * @param data The sheet data
 * @param columnName The name of the column to validate
 * @param expectedType The expected data type ('number', 'string', etc.)
 * @returns True if the column data is valid, false otherwise
 */
export const validateColumnDataType = (data: any[], columnName: string, expectedType: 'number' | 'string' = 'number'): boolean => {
  if (!data || data.length === 0 || !columnName) return false;

  // Check if the column exists
  if (!data[0].hasOwnProperty(columnName)) return false;

  // Check if the data type is as expected
  for (const row of data) {
    const value = row[columnName];

    if (value === null || value === undefined) continue; // Skip null/undefined values

    if (expectedType === 'number') {
      // Check if the value can be converted to a number
      const numValue = Number(value);
      if (isNaN(numValue)) return false;
    } else if (typeof value !== expectedType) {
      return false;
    }
  }

  return true;
};
